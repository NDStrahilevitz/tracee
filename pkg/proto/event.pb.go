// This wrapper is a quick win for the POC to integrate trace.Event with cel-go
// without implementing ref.TypeProv_ider for Go structs.
//
// TODO Add make target to generate Go structs from event.proto.
//
// $ sudo apt-get install --yes protobuf-compiler
// $ go install github.com/golang/protobuf/protoc-gen-go
// $ export PATH=$PATH:$(go env GOPATH)/bin
// $ protoc \
//    pkg/rules/celsig/wrapper/event.proto \
//    --go_out=plugins=grpc:/vagrant \
//    --experimental_allow_proto3_optional
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: event.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ValueType enumerates types of Argument values.
type ValueType int32

const (
	ValueType_UNKNOWN_VALUE_TYPE ValueType = 0
	ValueType_STRING             ValueType = 1
	ValueType_STRING_ARRAY       ValueType = 2
	ValueType_UINT32             ValueType = 3
	ValueType_UINT64             ValueType = 4
	ValueType_INT32              ValueType = 5
	ValueType_INT64              ValueType = 6
	ValueType_BOOL               ValueType = 7
	ValueType_BYTES              ValueType = 8
	ValueType_POINTER            ValueType = 9
	// SOCKADDR is just an example of a complex type wrapped from trace.Event to
	// Protocol Buffer message to demonstrate CEL capabilities with more complex
	// expressions.
	ValueType_SOCKADDR            ValueType = 10
	ValueType_SLIM_CRED           ValueType = 11
	ValueType_HOOKED_SYMBOL_ARRAY ValueType = 12
	ValueType_HOOKED_SYMBOL_MAP   ValueType = 13
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0:  "UNKNOWN_VALUE_TYPE",
		1:  "STRING",
		2:  "STRING_ARRAY",
		3:  "UINT32",
		4:  "UINT64",
		5:  "INT32",
		6:  "INT64",
		7:  "BOOL",
		8:  "BYTES",
		9:  "POINTER",
		10: "SOCKADDR",
		11: "SLIM_CRED",
		12: "HOOKED_SYMBOL_ARRAY",
		13: "HOOKED_SYMBOL_MAP",
	}
	ValueType_value = map[string]int32{
		"UNKNOWN_VALUE_TYPE":  0,
		"STRING":              1,
		"STRING_ARRAY":        2,
		"UINT32":              3,
		"UINT64":              4,
		"INT32":               5,
		"INT64":               6,
		"BOOL":                7,
		"BYTES":               8,
		"POINTER":             9,
		"SOCKADDR":            10,
		"SLIM_CRED":           11,
		"HOOKED_SYMBOL_ARRAY": 12,
		"HOOKED_SYMBOL_MAP":   13,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[0].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[0]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

type SaFamilyT int32

const (
	SaFamilyT_SA_FAMILY_T_UNSPEC SaFamilyT = 0
	// POSIX.1g used the name AF_LOCAL as a synonym for AF_UNIX,
	// but this name is not used in SUSv3.
	SaFamilyT_AF_UNIX  SaFamilyT = 1
	SaFamilyT_AF_INET  SaFamilyT = 2
	SaFamilyT_AF_INET6 SaFamilyT = 10
)

// Enum value maps for SaFamilyT.
var (
	SaFamilyT_name = map[int32]string{
		0:  "SA_FAMILY_T_UNSPEC",
		1:  "AF_UNIX",
		2:  "AF_INET",
		10: "AF_INET6",
	}
	SaFamilyT_value = map[string]int32{
		"SA_FAMILY_T_UNSPEC": 0,
		"AF_UNIX":            1,
		"AF_INET":            2,
		"AF_INET6":           10,
	}
)

func (x SaFamilyT) Enum() *SaFamilyT {
	p := new(SaFamilyT)
	*p = x
	return p
}

func (x SaFamilyT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SaFamilyT) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[1].Descriptor()
}

func (SaFamilyT) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[1]
}

func (x SaFamilyT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SaFamilyT.Descriptor instead.
func (SaFamilyT) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp           int64         `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ThreadStartTime     int64         `protobuf:"varint,2,opt,name=thread_start_time,json=threadStartTime,proto3" json:"thread_start_time,omitempty"`
	ProcessorId         int64         `protobuf:"varint,3,opt,name=processor_id,json=processorId,proto3" json:"processor_id,omitempty"`
	ProcessId           int64         `protobuf:"varint,4,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	CgroupId            uint64        `protobuf:"varint,5,opt,name=cgroup_id,json=cgroupId,proto3" json:"cgroup_id,omitempty"`
	ThreadId            int64         `protobuf:"varint,6,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	ParentProcessId     int64         `protobuf:"varint,7,opt,name=parent_process_id,json=parentProcessId,proto3" json:"parent_process_id,omitempty"`
	HostProcessId       int64         `protobuf:"varint,8,opt,name=host_process_id,json=hostProcessId,proto3" json:"host_process_id,omitempty"`
	HostThreadId        int64         `protobuf:"varint,9,opt,name=host_thread_id,json=hostThreadId,proto3" json:"host_thread_id,omitempty"`
	HostParentProcessId int64         `protobuf:"varint,10,opt,name=host_parent_process_id,json=hostParentProcessId,proto3" json:"host_parent_process_id,omitempty"`
	UserId              int64         `protobuf:"varint,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MountNs             int64         `protobuf:"varint,12,opt,name=mount_ns,json=mountNs,proto3" json:"mount_ns,omitempty"`
	Pidns               int64         `protobuf:"varint,13,opt,name=pidns,proto3" json:"pidns,omitempty"`
	ProcessName         string        `protobuf:"bytes,14,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	HostName            string        `protobuf:"bytes,15,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	ContainerId         string        `protobuf:"bytes,16,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ContainerImage      string        `protobuf:"bytes,17,opt,name=container_image,json=containerImage,proto3" json:"container_image,omitempty"`
	ContainerName       string        `protobuf:"bytes,18,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	PodName             string        `protobuf:"bytes,19,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodNamespace        string        `protobuf:"bytes,20,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	PodUid              string        `protobuf:"bytes,21,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	EventId             int64         `protobuf:"varint,22,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventName           string        `protobuf:"bytes,23,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	ArgsNum             int64         `protobuf:"varint,24,opt,name=args_num,json=argsNum,proto3" json:"args_num,omitempty"`
	ReturnValue         int64         `protobuf:"varint,25,opt,name=return_value,json=returnValue,proto3" json:"return_value,omitempty"`
	ContextFlags        *ContextFlags `protobuf:"bytes,26,opt,name=context_flags,json=contextFlags,proto3" json:"context_flags,omitempty"`
	StackAddresses      []uint64      `protobuf:"varint,27,rep,packed,name=stack_addresses,json=stackAddresses,proto3" json:"stack_addresses,omitempty"`
	Args                []*Argument   `protobuf:"bytes,28,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Event) GetThreadStartTime() int64 {
	if x != nil {
		return x.ThreadStartTime
	}
	return 0
}

func (x *Event) GetProcessorId() int64 {
	if x != nil {
		return x.ProcessorId
	}
	return 0
}

func (x *Event) GetProcessId() int64 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

func (x *Event) GetCgroupId() uint64 {
	if x != nil {
		return x.CgroupId
	}
	return 0
}

func (x *Event) GetThreadId() int64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *Event) GetParentProcessId() int64 {
	if x != nil {
		return x.ParentProcessId
	}
	return 0
}

func (x *Event) GetHostProcessId() int64 {
	if x != nil {
		return x.HostProcessId
	}
	return 0
}

func (x *Event) GetHostThreadId() int64 {
	if x != nil {
		return x.HostThreadId
	}
	return 0
}

func (x *Event) GetHostParentProcessId() int64 {
	if x != nil {
		return x.HostParentProcessId
	}
	return 0
}

func (x *Event) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Event) GetMountNs() int64 {
	if x != nil {
		return x.MountNs
	}
	return 0
}

func (x *Event) GetPidns() int64 {
	if x != nil {
		return x.Pidns
	}
	return 0
}

func (x *Event) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *Event) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *Event) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *Event) GetContainerImage() string {
	if x != nil {
		return x.ContainerImage
	}
	return ""
}

func (x *Event) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *Event) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *Event) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *Event) GetPodUid() string {
	if x != nil {
		return x.PodUid
	}
	return ""
}

func (x *Event) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *Event) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *Event) GetArgsNum() int64 {
	if x != nil {
		return x.ArgsNum
	}
	return 0
}

func (x *Event) GetReturnValue() int64 {
	if x != nil {
		return x.ReturnValue
	}
	return 0
}

func (x *Event) GetContextFlags() *ContextFlags {
	if x != nil {
		return x.ContextFlags
	}
	return nil
}

func (x *Event) GetStackAddresses() []uint64 {
	if x != nil {
		return x.StackAddresses
	}
	return nil
}

func (x *Event) GetArgs() []*Argument {
	if x != nil {
		return x.Args
	}
	return nil
}

type ContextFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerStarted bool `protobuf:"varint,1,opt,name=container_started,json=containerStarted,proto3" json:"container_started,omitempty"`
}

func (x *ContextFlags) Reset() {
	*x = ContextFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextFlags) ProtoMessage() {}

func (x *ContextFlags) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextFlags.ProtoReflect.Descriptor instead.
func (*ContextFlags) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

func (x *ContextFlags) GetContainerStarted() bool {
	if x != nil {
		return x.ContainerStarted
	}
	return false
}

// Argument represents an argument associated with the given Event.
type Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of this argument.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// value_type the type of the value held by this argument.
	ValueType ValueType `protobuf:"varint,2,opt,name=value_type,json=valueType,proto3,enum=proto.ValueType" json:"value_type,omitempty"`
	// value_type_name is the original name of the type
	// used to keep data between wrapping and unwrapping
	ValueTypeName string `protobuf:"bytes,3,opt,name=value_type_name,json=valueTypeName,proto3" json:"value_type_name,omitempty"`
	// value the value held by this argument.
	Value *Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Argument) Reset() {
	*x = Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argument) ProtoMessage() {}

func (x *Argument) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argument.ProtoReflect.Descriptor instead.
func (*Argument) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2}
}

func (x *Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Argument) GetValueType() ValueType {
	if x != nil {
		return x.ValueType
	}
	return ValueType_UNKNOWN_VALUE_TYPE
}

func (x *Argument) GetValueTypeName() string {
	if x != nil {
		return x.ValueTypeName
	}
	return ""
}

func (x *Argument) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

//
// Value is a union-like structure that wraps the value of a given Argument. We
// are not using Oneof nor Any type because of their limitations. The Oneof type
// does not allow repeated values, whereas Any is not convenient to unpack
// structured values.
//
// A similar approach is taken by Kubernetes APIs. For example,
// PersistentVolumeSource holds mutually exclusive volume definitions.
// See https://github.com/kubernetes/api/blob/master/core/v1/generated.proto
//
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringValue            *string                  `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof" json:"string_value,omitempty"`
	StringArrayValue       []string                 `protobuf:"bytes,2,rep,name=string_array_value,json=stringArrayValue,proto3" json:"string_array_value,omitempty"`
	BoolValue              *bool                    `protobuf:"varint,3,opt,name=bool_value,json=boolValue,proto3,oneof" json:"bool_value,omitempty"`
	Uint32Value            *uint32                  `protobuf:"varint,4,opt,name=uint32_value,json=uint32Value,proto3,oneof" json:"uint32_value,omitempty"`
	Uint64Value            *uint64                  `protobuf:"varint,5,opt,name=uint64_value,json=uint64Value,proto3,oneof" json:"uint64_value,omitempty"`
	Int32Value             *int32                   `protobuf:"varint,6,opt,name=int32_value,json=int32Value,proto3,oneof" json:"int32_value,omitempty"`
	Int64Value             *int64                   `protobuf:"varint,7,opt,name=int64_value,json=int64Value,proto3,oneof" json:"int64_value,omitempty"`
	BytesValue             []byte                   `protobuf:"bytes,8,opt,name=bytes_value,json=bytesValue,proto3,oneof" json:"bytes_value,omitempty"`
	PointerValue           *uint64                  `protobuf:"varint,9,opt,name=pointer_value,json=pointerValue,proto3,oneof" json:"pointer_value,omitempty"`
	SockaddrValue          *Sockaddr                `protobuf:"bytes,10,opt,name=sockaddr_value,json=sockaddrValue,proto3,oneof" json:"sockaddr_value,omitempty"`
	SlimcredValue          *Slimcred                `protobuf:"bytes,11,opt,name=slimcred_value,json=slimcredValue,proto3,oneof" json:"slimcred_value,omitempty"`
	HookedSymbolMapValue   map[string]*Hookedsymbol `protobuf:"bytes,12,rep,name=hooked_symbol_map_value,json=hookedSymbolMapValue,proto3" json:"hooked_symbol_map_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HookedSymbolArrayValue []*Hookedsymbol          `protobuf:"bytes,13,rep,name=hooked_symbol_array_value,json=hookedSymbolArrayValue,proto3" json:"hooked_symbol_array_value,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{3}
}

func (x *Value) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

func (x *Value) GetStringArrayValue() []string {
	if x != nil {
		return x.StringArrayValue
	}
	return nil
}

func (x *Value) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

func (x *Value) GetUint32Value() uint32 {
	if x != nil && x.Uint32Value != nil {
		return *x.Uint32Value
	}
	return 0
}

func (x *Value) GetUint64Value() uint64 {
	if x != nil && x.Uint64Value != nil {
		return *x.Uint64Value
	}
	return 0
}

func (x *Value) GetInt32Value() int32 {
	if x != nil && x.Int32Value != nil {
		return *x.Int32Value
	}
	return 0
}

func (x *Value) GetInt64Value() int64 {
	if x != nil && x.Int64Value != nil {
		return *x.Int64Value
	}
	return 0
}

func (x *Value) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *Value) GetPointerValue() uint64 {
	if x != nil && x.PointerValue != nil {
		return *x.PointerValue
	}
	return 0
}

func (x *Value) GetSockaddrValue() *Sockaddr {
	if x != nil {
		return x.SockaddrValue
	}
	return nil
}

func (x *Value) GetSlimcredValue() *Slimcred {
	if x != nil {
		return x.SlimcredValue
	}
	return nil
}

func (x *Value) GetHookedSymbolMapValue() map[string]*Hookedsymbol {
	if x != nil {
		return x.HookedSymbolMapValue
	}
	return nil
}

func (x *Value) GetHookedSymbolArrayValue() []*Hookedsymbol {
	if x != nil {
		return x.HookedSymbolArrayValue
	}
	return nil
}

type Sockaddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaFamily     SaFamilyT `protobuf:"varint,1,opt,name=sa_family,json=saFamily,proto3,enum=proto.SaFamilyT" json:"sa_family,omitempty"`
	SunPath      string    `protobuf:"bytes,2,opt,name=sun_path,json=sunPath,proto3" json:"sun_path,omitempty"`
	SinAddr      string    `protobuf:"bytes,3,opt,name=sin_addr,json=sinAddr,proto3" json:"sin_addr,omitempty"`
	SinPort      uint32    `protobuf:"varint,4,opt,name=sin_port,json=sinPort,proto3" json:"sin_port,omitempty"`
	Sin6Addr     string    `protobuf:"bytes,5,opt,name=sin6_addr,json=sin6Addr,proto3" json:"sin6_addr,omitempty"`
	Sin6Port     uint32    `protobuf:"varint,6,opt,name=sin6_port,json=sin6Port,proto3" json:"sin6_port,omitempty"`
	Sin6Flowinfo uint32    `protobuf:"varint,7,opt,name=sin6_flowinfo,json=sin6Flowinfo,proto3" json:"sin6_flowinfo,omitempty"`
	Sin6ScopeId  uint32    `protobuf:"varint,8,opt,name=sin6_scope_id,json=sin6ScopeId,proto3" json:"sin6_scope_id,omitempty"`
}

func (x *Sockaddr) Reset() {
	*x = Sockaddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sockaddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sockaddr) ProtoMessage() {}

func (x *Sockaddr) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sockaddr.ProtoReflect.Descriptor instead.
func (*Sockaddr) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{4}
}

func (x *Sockaddr) GetSaFamily() SaFamilyT {
	if x != nil {
		return x.SaFamily
	}
	return SaFamilyT_SA_FAMILY_T_UNSPEC
}

func (x *Sockaddr) GetSunPath() string {
	if x != nil {
		return x.SunPath
	}
	return ""
}

func (x *Sockaddr) GetSinAddr() string {
	if x != nil {
		return x.SinAddr
	}
	return ""
}

func (x *Sockaddr) GetSinPort() uint32 {
	if x != nil {
		return x.SinPort
	}
	return 0
}

func (x *Sockaddr) GetSin6Addr() string {
	if x != nil {
		return x.Sin6Addr
	}
	return ""
}

func (x *Sockaddr) GetSin6Port() uint32 {
	if x != nil {
		return x.Sin6Port
	}
	return 0
}

func (x *Sockaddr) GetSin6Flowinfo() uint32 {
	if x != nil {
		return x.Sin6Flowinfo
	}
	return 0
}

func (x *Sockaddr) GetSin6ScopeId() uint32 {
	if x != nil {
		return x.Sin6ScopeId
	}
	return 0
}

type Slimcred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                              // real U_id of the task
	Gid            uint32 `protobuf:"varint,2,opt,name=gid,proto3" json:"gid,omitempty"`                                              // real G_id of the task
	Suid           uint32 `protobuf:"varint,3,opt,name=suid,proto3" json:"suid,omitempty"`                                            // saved U_id of the task
	Sgid           uint32 `protobuf:"varint,4,opt,name=sgid,proto3" json:"sgid,omitempty"`                                            // saved G_id of the task
	Euid           uint32 `protobuf:"varint,5,opt,name=euid,proto3" json:"euid,omitempty"`                                            // effective U_id of the task
	Egid           uint32 `protobuf:"varint,6,opt,name=egid,proto3" json:"egid,omitempty"`                                            // effective G_id of the task
	Fsuid          uint32 `protobuf:"varint,7,opt,name=fsuid,proto3" json:"fsuid,omitempty"`                                          // U_id for VFS ops
	Fsgid          uint32 `protobuf:"varint,8,opt,name=fsgid,proto3" json:"fsgid,omitempty"`                                          // G_id for VFS ops
	UserNamespace  uint32 `protobuf:"varint,9,opt,name=user_namespace,json=userNamespace,proto3" json:"user_namespace,omitempty"`     // User Namespace of the of the event
	SecureBits     uint32 `protobuf:"varint,10,opt,name=secure_bits,json=secureBits,proto3" json:"secure_bits,omitempty"`             // SU_id-less security management
	CapInheritable uint64 `protobuf:"varint,11,opt,name=cap_inheritable,json=capInheritable,proto3" json:"cap_inheritable,omitempty"` // caps our children can inherit
	CapPermitted   uint64 `protobuf:"varint,12,opt,name=cap_permitted,json=capPermitted,proto3" json:"cap_permitted,omitempty"`       // caps we're permitted
	CapEffective   uint64 `protobuf:"varint,13,opt,name=cap_effective,json=capEffective,proto3" json:"cap_effective,omitempty"`       // caps we can actually use
	CapBounding    uint64 `protobuf:"varint,14,opt,name=cap_bounding,json=capBounding,proto3" json:"cap_bounding,omitempty"`          // capability bounding set
	CapAmbient     uint64 `protobuf:"varint,15,opt,name=cap_ambient,json=capAmbient,proto3" json:"cap_ambient,omitempty"`             // Ambient capability set
}

func (x *Slimcred) Reset() {
	*x = Slimcred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slimcred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slimcred) ProtoMessage() {}

func (x *Slimcred) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slimcred.ProtoReflect.Descriptor instead.
func (*Slimcred) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{5}
}

func (x *Slimcred) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Slimcred) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *Slimcred) GetSuid() uint32 {
	if x != nil {
		return x.Suid
	}
	return 0
}

func (x *Slimcred) GetSgid() uint32 {
	if x != nil {
		return x.Sgid
	}
	return 0
}

func (x *Slimcred) GetEuid() uint32 {
	if x != nil {
		return x.Euid
	}
	return 0
}

func (x *Slimcred) GetEgid() uint32 {
	if x != nil {
		return x.Egid
	}
	return 0
}

func (x *Slimcred) GetFsuid() uint32 {
	if x != nil {
		return x.Fsuid
	}
	return 0
}

func (x *Slimcred) GetFsgid() uint32 {
	if x != nil {
		return x.Fsgid
	}
	return 0
}

func (x *Slimcred) GetUserNamespace() uint32 {
	if x != nil {
		return x.UserNamespace
	}
	return 0
}

func (x *Slimcred) GetSecureBits() uint32 {
	if x != nil {
		return x.SecureBits
	}
	return 0
}

func (x *Slimcred) GetCapInheritable() uint64 {
	if x != nil {
		return x.CapInheritable
	}
	return 0
}

func (x *Slimcred) GetCapPermitted() uint64 {
	if x != nil {
		return x.CapPermitted
	}
	return 0
}

func (x *Slimcred) GetCapEffective() uint64 {
	if x != nil {
		return x.CapEffective
	}
	return 0
}

func (x *Slimcred) GetCapBounding() uint64 {
	if x != nil {
		return x.CapBounding
	}
	return 0
}

func (x *Slimcred) GetCapAmbient() uint64 {
	if x != nil {
		return x.CapAmbient
	}
	return 0
}

type Hookedsymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolName  string `protobuf:"bytes,1,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
	ModuleOwner string `protobuf:"bytes,2,opt,name=module_owner,json=moduleOwner,proto3" json:"module_owner,omitempty"`
}

func (x *Hookedsymbol) Reset() {
	*x = Hookedsymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hookedsymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hookedsymbol) ProtoMessage() {}

func (x *Hookedsymbol) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hookedsymbol.ProtoReflect.Descriptor instead.
func (*Hookedsymbol) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{6}
}

func (x *Hookedsymbol) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *Hookedsymbol) GetModuleOwner() string {
	if x != nil {
		return x.ModuleOwner
	}
	return ""
}

var File_event_proto protoreflect.FileDescriptor

var file_event_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x07, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x16, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x64, 0x6e, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x69, 0x64, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x6f, 0x64, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x72, 0x67, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x3b, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9e, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02,
	0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x07, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x6f, 0x63, 0x6b, 0x61, 0x64, 0x64, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x6f, 0x63, 0x6b, 0x61, 0x64, 0x64, 0x72, 0x48, 0x08, 0x52,
	0x0d, 0x73, 0x6f, 0x63, 0x6b, 0x61, 0x64, 0x64, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x6c, 0x69, 0x6d, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x63, 0x72, 0x65, 0x64, 0x48, 0x09, 0x52, 0x0d, 0x73, 0x6c,
	0x69, 0x6d, 0x63, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5d,
	0x0a, 0x17, 0x68, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x48, 0x6f,
	0x6f, 0x6b, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x68, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a,
	0x19, 0x68, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x68, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x16, 0x68, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x5c, 0x0a,
	0x19, 0x48, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4d, 0x61, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x68, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x6c, 0x69, 0x6d, 0x63, 0x72, 0x65, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x08, 0x73, 0x6f, 0x63, 0x6b, 0x61, 0x64,
	0x64, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x61, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x61,
	0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x52, 0x08, 0x73, 0x61, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x69, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x6e, 0x36, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x6e, 0x36, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x6e, 0x36, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x69, 0x6e, 0x36, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x36, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x36,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x22, 0xa9, 0x03, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x6d,
	0x63, 0x72, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x67, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x65, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x67, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x65, 0x67, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x73, 0x75, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x73, 0x75, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x73, 0x67, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66,
	0x73, 0x67, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x69, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x61,
	0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61,
	0x70, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x5f, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x41, 0x6d, 0x62, 0x69,
	0x65, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x0c, 0x68, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x2a, 0xde, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x36,
	0x34, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f,
	0x4c, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x08, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x4f, 0x43, 0x4b, 0x41, 0x44, 0x44, 0x52, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4c, 0x49,
	0x4d, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x4f, 0x4f, 0x4b,
	0x45, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10,
	0x0c, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x4f, 0x4f, 0x4b, 0x45, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x0d, 0x2a, 0x4d, 0x0a, 0x0b, 0x73, 0x61, 0x5f, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x41, 0x5f, 0x46, 0x41,
	0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x46, 0x5f, 0x55, 0x4e, 0x49, 0x58, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x46, 0x5f,
	0x49, 0x4e, 0x45, 0x54, 0x36, 0x10, 0x0a, 0x42, 0x0b, 0x5a, 0x09, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_proto_rawDescOnce sync.Once
	file_event_proto_rawDescData = file_event_proto_rawDesc
)

func file_event_proto_rawDescGZIP() []byte {
	file_event_proto_rawDescOnce.Do(func() {
		file_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_proto_rawDescData)
	})
	return file_event_proto_rawDescData
}

var file_event_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_event_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_event_proto_goTypes = []interface{}{
	(ValueType)(0),       // 0: proto.ValueType
	(SaFamilyT)(0),       // 1: proto.sa_family_t
	(*Event)(nil),        // 2: proto.Event
	(*ContextFlags)(nil), // 3: proto.ContextFlags
	(*Argument)(nil),     // 4: proto.Argument
	(*Value)(nil),        // 5: proto.Value
	(*Sockaddr)(nil),     // 6: proto.sockaddr
	(*Slimcred)(nil),     // 7: proto.slimcred
	(*Hookedsymbol)(nil), // 8: proto.hookedsymbol
	nil,                  // 9: proto.Value.HookedSymbolMapValueEntry
}
var file_event_proto_depIdxs = []int32{
	3,  // 0: proto.Event.context_flags:type_name -> proto.ContextFlags
	4,  // 1: proto.Event.args:type_name -> proto.Argument
	0,  // 2: proto.Argument.value_type:type_name -> proto.ValueType
	5,  // 3: proto.Argument.value:type_name -> proto.Value
	6,  // 4: proto.Value.sockaddr_value:type_name -> proto.sockaddr
	7,  // 5: proto.Value.slimcred_value:type_name -> proto.slimcred
	9,  // 6: proto.Value.hooked_symbol_map_value:type_name -> proto.Value.HookedSymbolMapValueEntry
	8,  // 7: proto.Value.hooked_symbol_array_value:type_name -> proto.hookedsymbol
	1,  // 8: proto.sockaddr.sa_family:type_name -> proto.sa_family_t
	8,  // 9: proto.Value.HookedSymbolMapValueEntry.value:type_name -> proto.hookedsymbol
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_event_proto_init() }
func file_event_proto_init() {
	if File_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sockaddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slimcred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hookedsymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_event_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_proto_goTypes,
		DependencyIndexes: file_event_proto_depIdxs,
		EnumInfos:         file_event_proto_enumTypes,
		MessageInfos:      file_event_proto_msgTypes,
	}.Build()
	File_event_proto = out.File
	file_event_proto_rawDesc = nil
	file_event_proto_goTypes = nil
	file_event_proto_depIdxs = nil
}
