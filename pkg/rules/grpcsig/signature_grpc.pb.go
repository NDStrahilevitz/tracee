// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: signature.proto

package grpcsig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SignatureClient is the client API for Signature service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignatureClient interface {
	GetMetadata(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*SignatureMetadata, error)
	GetEventSelectors(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*SignatureEventSelectors, error)
	OnEvent(ctx context.Context, opts ...grpc.CallOption) (Signature_OnEventClient, error)
}

type signatureClient struct {
	cc grpc.ClientConnInterface
}

func NewSignatureClient(cc grpc.ClientConnInterface) SignatureClient {
	return &signatureClient{cc}
}

func (c *signatureClient) GetMetadata(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*SignatureMetadata, error) {
	out := new(SignatureMetadata)
	err := c.cc.Invoke(ctx, "/Signature/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signatureClient) GetEventSelectors(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*SignatureEventSelectors, error) {
	out := new(SignatureEventSelectors)
	err := c.cc.Invoke(ctx, "/Signature/GetEventSelectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signatureClient) OnEvent(ctx context.Context, opts ...grpc.CallOption) (Signature_OnEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &Signature_ServiceDesc.Streams[0], "/Signature/OnEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &signatureOnEventClient{stream}
	return x, nil
}

type Signature_OnEventClient interface {
	Send(*Event) error
	Recv() (*Finding, error)
	grpc.ClientStream
}

type signatureOnEventClient struct {
	grpc.ClientStream
}

func (x *signatureOnEventClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signatureOnEventClient) Recv() (*Finding, error) {
	m := new(Finding)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignatureServer is the server API for Signature service.
// All implementations must embed UnimplementedSignatureServer
// for forward compatibility
type SignatureServer interface {
	GetMetadata(context.Context, *Nothing) (*SignatureMetadata, error)
	GetEventSelectors(context.Context, *Nothing) (*SignatureEventSelectors, error)
	OnEvent(Signature_OnEventServer) error
	mustEmbedUnimplementedSignatureServer()
}

// UnimplementedSignatureServer must be embedded to have forward compatible implementations.
type UnimplementedSignatureServer struct {
}

func (UnimplementedSignatureServer) GetMetadata(context.Context, *Nothing) (*SignatureMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedSignatureServer) GetEventSelectors(context.Context, *Nothing) (*SignatureEventSelectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventSelectors not implemented")
}
func (UnimplementedSignatureServer) OnEvent(Signature_OnEventServer) error {
	return status.Errorf(codes.Unimplemented, "method OnEvent not implemented")
}
func (UnimplementedSignatureServer) mustEmbedUnimplementedSignatureServer() {}

// UnsafeSignatureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignatureServer will
// result in compilation errors.
type UnsafeSignatureServer interface {
	mustEmbedUnimplementedSignatureServer()
}

func RegisterSignatureServer(s grpc.ServiceRegistrar, srv SignatureServer) {
	s.RegisterService(&Signature_ServiceDesc, srv)
}

func _Signature_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Signature/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureServer).GetMetadata(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signature_GetEventSelectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignatureServer).GetEventSelectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Signature/GetEventSelectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignatureServer).GetEventSelectors(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signature_OnEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignatureServer).OnEvent(&signatureOnEventServer{stream})
}

type Signature_OnEventServer interface {
	Send(*Finding) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type signatureOnEventServer struct {
	grpc.ServerStream
}

func (x *signatureOnEventServer) Send(m *Finding) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signatureOnEventServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Signature_ServiceDesc is the grpc.ServiceDesc for Signature service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Signature_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Signature",
	HandlerType: (*SignatureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetadata",
			Handler:    _Signature_GetMetadata_Handler,
		},
		{
			MethodName: "GetEventSelectors",
			Handler:    _Signature_GetEventSelectors_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnEvent",
			Handler:       _Signature_OnEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "signature.proto",
}
